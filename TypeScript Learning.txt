
2020.10.26  1.37 am
1. extension of TypeScript document is .ts

2. install TypeScript: npm install -g typescript

    version：  tsc -v

3. tsc test.ts   ---> generate test.js

4. tsc -init ---->generate tsconfig,json

5. Modify "outDir": "./js"   in VSCode, Terminal  -->Run Task--->TypeScript-->tsc:watch-tsconfig.json 
    As long as .ts is modified, .js document in js fold could be modified and compiled to .js document. 

or   tsc test --watch  , generate a .js doc in the same folder.
----------------------------------------------------------------------------------------------------------
2020.10.27 1.57am

1. variable declaration
let a;
a=10;
a=true;      //ok

let b=20;
b= true     //wrong, true cannot be assigned to b

let multipleType: number | boolean;
multipleType=20;
multipleType=true;      //ok

let anyType:any;
anyType=20;
anyType=true;  //ok

2. function

function add(num1:number,num2:number):number{
    return num1+num2;
}
console.log(add(23,5))

function add(num1:number,num2?:number):number{     // ? means optional parameter
    if(num2)   //if mnum2 is not null, is a number
        return num1+num2;
    else
        return num1
}
console.log(add(3))


function FullName(person:{firstName:string, lastName:string}){
    console.log(person.firstName,person.lastName);
}

let p = {
    firstName: 'Felix',
    lastName: 'Wang'
};
FullName(p)

3. Interface
interface Person{
    firstName:string;
    lastName:string;
}

function FullName(person:Person){
    console.log(person.firstName,person.lastName);
}

let p = {
    firstName: 'Felix',
    lastName: 'Wang'
};
FullName(p)


4. Class

class Employee {
    employeeName:string;
    constructor(name:string){
        this.employeeName=name;
    }
    greet(){
        console.log('Good morning,',this.employeeName)
    }
}

let emp1=new Employee("Sherry");
console.log(emp1.employeeName);
emp1.greet();

class Manager extends Employee{
    constructor(managerName:string){
        super(managerName);
    }
    delegateWork(){
        console.log('Manager delegate tasks');
    }
}
let mag1=new Manager("Felix");
mag1.delegateWork();
mag1.greet();
console.log(mag1.employeeName);

5.array

// foreach the array
let colors: string[]=["red","white","green"];
for(let i of colors){
console.log(i);
}
-------------------------------------------------
2020 10.28

class can include the static properties and static functions.

static functions can only use the static properties.

//class and inherit
class Person {
    public name:string;
    static age:number;   //static property
    constructor(name:string){
        this.name=name;
    }
    run1():string{
        return this.name+' is running';
    }
    static run2():number{
        return this.age;
    }

}


polymorphic 多态

abstract class and abstract method
abstract class cannot be instanced.
abstract method is only in abstract class.
abstract method does not include detailed implementation.
The child class must implement the abstract method in abstract class.

abstract class Animal{
    abstract eat():any;
}
//var v=new Animal();   //error, cannot create an instance of an abstract class


interface

interface FullName{
    firstName:string;
    lastName:String
}

function printName(name:FullName):void{
    console.log(name.firstName+' and '+name.lastName);
}

printName({firstName:'Felix', lastName:'wang'});
--------------------------------------------------------
2020 10.28 2.30 pm

Generics
solve the reusability of class, function, interface etc.
Generics can support unspecific data type, but the return parameters should be consistant with input parameters
//T stands for Generics

//Generics class      add <T> behind the class name 

class MinClass<T>{
    public list:T[]=[];
    add(value:T):void{
        this.list.push(value);
    }

    Min():T{
        var min=this.list[0];
        for(var i=0;i<this.list.length;i++){
            if(min>this.list[i]){
                min=this.list[i];
            }
        }
        return min;
    }
}
 var m1=new MinClass<Number>();
 m1.add(4);
 m1.add(7);
 m1.add(3);
 console.log(m1.Min());

 var m2=new MinClass<string>();
 m2.add('b');
 m2.add('g');
 m2.add('r');
 console.log(m2.Min());

 //interface Generics
interface ConfigFn<T>{
    (value:T):T;
    
}

function getData2<T>(value:T):T{
    return value;
}
var myGetData:ConfigFn<string>=getData2;

myGetData('ser');
console.log(myGetData('ser'));
--------------------------------------
module

use export, if some files import it, the methods can be used


export var dbUrl='xxxx'    //export the variable
export function getDbData():any[]{
    console.log('get data from DB');
    return[
        {title:'123'},
        {type:'345'}
    ]
}
export function save(){
    console.log('save successfully');
}


use import 
import { getDbData, save } from './modules/db'
import { getDbData as getD, save } from './modules/db'   // use as to short the name
getDbData();
save();

export {dbUrl,getDbData,save}    //  another way to export

export default getDbData  // only one export default
import getDbData from './modules/db'
-----------------------------

namespace

one module can include many namespaces.

//decorator   can extend the methods and properties of the class
function decoratorName(params:any){
    console.log(params);
    params.prototype.apiUrl='xxxx';
}
-------------------------------------------------
2020 10.29 00.56 am
@decoratorName
class HttpClient2{
    constructor(){}
    getData2(){};
}

var http:any=new HttpClient2();
console.log(http.apiUrl);


// class decorator 
function logClass(target:any){
    console.log(target);
    return class extends target{
        apiUrl:any='I am the apiUrl in decorator';
        getData3(){
            this.apiUrl=this.apiUrl+'....';
            console.log(this.apiUrl);
        }
    }
}

@logClass
class httpClient3{
    public apiUrl:string|undefined;
    constructor(){
        this.apiUrl='I am the apiUrl of constructor';
    }
    getData3(){
        console.log(this.apiUrl);
    }
}

var htt=new httpClient3();
htt.getData3();


//property decorator

function logProperty(params:any){
    return function(target:any,attr:any){
        console.log(target);
        console.log(attr);
        target.attr=params;
    }
}

class httpClient4{
    @logProperty("http://seek.com.au")
    public url:string|undefined;
    constructor(){
        this.url='I am the url of constructor';
    }
    getData4(){
        console.log(this.getData4());
    }
}

//property decorator

function logProperty(params:any){
    return function(target:any,attr:any){  //two parameters
        console.log(target);
        console.log(attr);
        target[attr]=params;
    }
}

class httpClient4{
    @logProperty("http://seek.com.au")
    public url:string|undefined;
    constructor(){
    }
    getData4(){
        console.log(this.url);
    }
}

var http4=new httpClient4();
http4.getData4();


decorator run order: property>method>class


-------------------------
2020.10.30 0.54 am

npm i -g ts-node   install ts-node 

ts-node test.ts


ctrl+/      annotation ofr single line

shift+alt+a   annotation of multiple lines 


type cls to clear terminal info list

----------------------------------------
variable
variable  declaration by keyword let

let age:number=0;
age=18;
console.log(age);

variable name rules: number ,letter, _,$, and not start with number.

letter: case sensitive ,so age and Age are two different variables.

camelCase:   cityName, studentNumber

-------------------------------

data type

1. primitive types(basic data types)
number  (include integer and float,positive,negative)
string
boolean
undefined  has only one value which is also itself: undefined
null has only one value which is also itself: null

undefined means that a variable has been declared but no value

null means that a variable has been declared and the value is null

2. object types(complex data types)
object、array
function
--------------------------------------------
operator

assignment operator: assign the value of right to the variable of left
=   age=18;
age=age+1   first perform the right part, and then the left
+=   age+=1    ==>age=age+1
-=    age-=1   ==>age=age-1
*=
/=

Arithmetic operator

+-*/

+ can also be used for string concetenation. 'he is a'+' student'
console.log(1+'2')//12    console.log('1'+2) //12
console.log(2-+'1')//1

comparison operator
the result is boolean, true or false
>
<
>=
<=
!==
===

increment/decrement operator
++  => +=1
--  => -=1

age++   =>age+=1

logical operator

and    &&    value of both sides are true at the same time, the result is true, or it is false
or     ||    any value of both sides is true, the result is true
nor    !     the opposite result, false->true, true->false


true && false  //false
console.log(2>1 && 2>=2)  //true


true|| false   //true
console.log(3<2 ||1<=2) // true

console.log(!true)  //false
console.log(!false||false)  //true
-------------------------------------------------

statements

conditional statement   if(){}  else{}

ternary operator  condition?value1:value2   if condition is true, value is value1, otherwise value is value2
console.log(5>3?6:5);   //6  

loop statement

for loop

for(initialize statement(only perform once);judge the condition;counter update){
    loop body
}

first enter into the loop body ,and then perform counter update
for(let count:number =1;count<5;count++){
    console.log('I love you');
}
if counter=1, then console.log, and then, count++

breakpoint debugging 
----------------------------------------------------------------------------------
2020.10.30  3.26 pm

break and continue
------------------------------
break: let loop end early
for(let i:number=1; i<=5;i++){
    if(i===3){
        break;
    }
    console.log('eating the ' + i + ' steam bun');
}
eating the 1steam bun
eating the 2steam bun

-----------------------------
continue: jump out this loop and continue the next loop

for(let i:number=1; i<=5;i++){
    if(i===3){
        continue;
    }
    console.log('eating the ' + i + ' steam bun');
}
eating the 1 steam bun
eating the 2 steam bun
eating the 4 steam bun
eating the 5 steam bun
----------------------------------------------------------
array

two ways to create array:  first one is recommended 
first way(recommended):
let names:string[]=[];
let names:string[]=['Felix','Sherry','Bob','Sue'];
second way:
let names:string[]=new Array();
let names2:string[]=new Array('Felix','Sherry','Bob','Sue');

length of array: names.length
index of array starts from 0

get the value from array:   names[0], names[1]

modify one value of array:
1. get the value  2. modify the value.
arrayName[index]=new value;
names[0]='Eric';      --->names[]-->['Eric','Sherry','Bob','Sue']

add a new value for array
arrayName[arrayName.length]=new value
names[length]='Jack'     //['Eric','Sherry','Bob','Sue','Jack']

iterate through array: for loop
for(let i:number=0;i<names.length;i++){
    console.log(names[i]);
}

Practise:
add the elements which are not 0 to a new array.

let nums:number[]=[200,30,3,212,0,34,0,3];
let newNums:number[]=[];
for(let i:number=0;i<nums.length;i++){
    if(nums[i]!==0){
        newNums[newNums.length]=nums[i];
    }
}
console.log(newNums);

--------------------------------------------------
function


function calculate(nums:number[]):number{
let sum:number=0;
for(let i:number=0;i<nums.length;i++){
    sum=sum+nums[i];
}
return sum;
}

let numArr:number[]=[4,8,9,15];
let sum:number=calculate(numArr);
console.log(sum)


//create a function to return the max value from two values
function getMax(num1:number, num2:number):number{
    return num1>num2?num1:num2;
}
console.log(getMax(5,18))

function getMax(num1:number, num2:number):number{
    return num1>num2?num1:num2;
    console.log(2);  // this code is not performed
}

---------------------------------------------------

object consist of properties and methods

let person{}  create an empty object named person

in object, properties and methods use key-value mode with :

let person={
    key1:value1,     name:'teacher liu',
    key2:value2      age:18
}

if value is a function, the key is a method, otherwise it is a property.

let person={
    sayHi:function(){  // this is a anonymous function
        console.log('hello, i ama method')
    }
}


object type annotation:

let person:{
    name:string;
    age:number;
}

object:
person={
    name:'Felix',
    age:17
}

----------------------------------------------
interface

interface IUser {
    name:string;
    age:number;
    sayHi:()=>void
}

let user1:IUser={
    name:'Jack',
    age:18,
    sayHi: function(){
        console.log('')
    }
}
----------------------------------
array
common operation: add,delete,iterate,filter
main methods:push, foreach,some

let songs:string[]=['hero','five rings','apologize']

console.log(songs.length)

let leng=songs.push('Sunshine') //push can add a new value at the last place ,also return the length

console.log(songs,leng) //  [ 'hero', 'five rings', 'apologize', 'Sunshine' ] 4

-----------------------------
foreach
callback funcion: a function passed into another function as an argument.,which
is then envoked inside the outer function to complete some actions.

foreach method, envoke the callback function for every item of this array.
songs.foreach(function(iten,index){
    console.log('index is ', index, 'and item is'. item);
})

foreach() iterates all elements of array, cannot stop bu using  return and so on.

----------------------
some()
some method can stop when the condition is true, can use return to stop iterate.
some() has the return value which is boolean value
let nums:number[]=[1,12,9,8,6];
let hasOne:boolean=false;

hasOne=nums.some(function(num){
    if(num>10){
        return true;
    }
    else
    return false
})
console.log(hasOne)

----------------------












